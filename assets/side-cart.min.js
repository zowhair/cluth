class CartDrawer {
    constructor() {
      this.cartDrawer = document.querySelector(".cart-drawer");
      this.cartCountElements = document.querySelectorAll(".cart-link__bubble-num");
      this.cartDrawerContent = document.querySelector("#shopify-section-cart-drawer-content")
      this.cartDrawerBox = document.querySelector(".cart-drawer-box");
      this.cartFooter = document.querySelector(".cart-drawer-footer");
      this.cartItemsContainer = document.querySelector(".items-and-also-like");
      this.bodyPage = document.querySelector("body");
      this.selectVariants = document.querySelectorAll(".change-variant");
  
      this.openCartDrawer = this.openCartDrawer.bind(this);
      this.upsell = this.upsell.bind(this);
      this.closeCartDrawer = this.closeCartDrawer.bind(this);
      this.updateCartItemCounts = this.updateCartItemCounts.bind(this);
      this.updateCartDrawer = this.updateCartDrawer.bind(this);
      this.gamification = this.gamification.bind(this);
      this.addCartDrawerListeners = this.addCartDrawerListeners.bind(this);
      this.handleQuantityButtonClick = this.handleQuantityButtonClick.bind(this);
      this.handleCartDrawerClick = this.handleCartDrawerClick.bind(this);
      this.adjustHeight = this.adjustHeight.bind(this);
      this.handleCloseButtonClick = this.handleCloseButtonClick.bind(this);
      this.handleFormSubmit = this.handleFormSubmit.bind(this);
      this.handleCartLinkClick = this.handleCartLinkClick.bind(this);
      this.changeVariant = this.changeVariant.bind(this);
  
      this.addCartDrawerListeners();
      this.addFormListeners();
      this.addCartLinkListeners();
      this.changeVariant();
  
    }
  
    async getCartData() {
        try {
          const response = await fetch(`/cart.js`, { method: 'GET' });
          return response.json();
        } catch (error) {
          console.error('Error:', error);
        }
    }
  
    openCartDrawer( skipGamification = false ) {
      this.cartDrawer.classList.add("cart-drawer--active");
      window.posicionVertical = window.scrollY || window.pageYOffset;
      this.bodyPage.classList.add("cart-drawer--open");
      
  
      if (!skipGamification) {
          this.getCartData().then(data => {
            this.gamification(data);
          });
      }
  
      if (document.querySelector('.cart-drawer .you-may-also-like')) {
        this.upsell();
      }
  
      
  
      document.querySelector('.cart-drawer--active').addEventListener("click", (e) => {
        this.closeCartDrawer()
      });
  
  
    }
  
    changeVariant() {
  
        const addNewVariant = async (productId) => {
            const url = '/cart/add.js';
            const requestData = {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                id: productId,
                quantity: 1
              })
            };
          
            try {
  
              const response = await fetch(url, requestData);
              const data = await response.json();
              console.log('Product added to cart:', data);
            
                // Update cart
                this.updateCartDrawer();
  
              
  
            } catch (error) {
              console.error('Error adding product to cart:', error);
            }
        }
  
        async function updateCart(key, newVariant) {
            const url = window.Shopify.routes.root + 'cart/update.js';
            const data = {
                updates: {
                    [key]: 0
                }
            };
          
            try {
              const response = await fetch(url, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify(data),
              });
          
              if (response.ok) {
                addNewVariant(newVariant)
              } else {
                console.error('Error en la solicitud:', response.status);
              }
            } catch (error) {
              console.error('Error de comunicaciÃ³n:', error);
            }
        }
  
        document.addEventListener("change", async (event) => {
            if (event.target.classList.contains("change-variant")) {
  
                let key = event.target.closest('.cart-drawer-item').getAttribute('data-line-item-key'),
                    newVariant = event.target.value
  
                updateCart(key, newVariant);
  
            }
        });
          
  
    }
  
    closeCartDrawer() {
      this.bodyPage.classList.remove("cart-drawer--open");
      window.scrollTo(0, window.posicionVertical);
      this.cartDrawer.classList.remove("cart-drawer--active");
      
    }
  
    updateCartItemCounts(count) {
      this.cartCountElements.forEach((el) => {
        el.textContent = count;
      });
      if (!this.bodyPage.classList.contains("cart-has-items")) {
        this.bodyPage.classList.add("cart-has-items");
      }
      this.adjustHeight()
    }
  
    adjustHeight() {
        let contentHeight = window.innerHeight;
        let screenHeight = window.screen.height;
    
        if (document.querySelector(".cart-drawer-footer")) {
          let footerHeight = document.querySelector(".cart-drawer-footer").offsetHeight,
              gamificationHeight = document.querySelector(".clutch-cart-gamification").offsetHeight,
              drawerHeaderHeight = document.querySelector(".cart-drawer-header").offsetHeight,
              contentHeight = window.screen.height - window.innerHeight,
              totalHeight =  gamificationHeight + drawerHeaderHeight + contentHeight + 50;
    
          document.querySelector(".items-and-also-like").style.height = `calc(100vh - ${totalHeight}px)`;
          console.log(`footer height: ${totalHeight}`);
        }
    }
  
    async updateCartDrawer(cart) {
      const res = await fetch("/?section_id=cart-drawer");
      const text = await res.text();
      const html = document.createElement("div");
      html.innerHTML = text;
  
      const newBox = html.querySelector("#shopify-section-cart-drawer-content").innerHTML;
  
      this.cartDrawerContent.innerHTML = newBox;
  
      if (document.querySelector( '.clutch-cart-gamification') ) {
  
        this.getCartData().then(data => {
  
            this.updateCartItemCounts(data.item_count);
            this.gamification(data);
  
        });
  
      }else {
        this.getCartData().then(data => {
  
            this.updateCartItemCounts(data.item_count);
  
        });
      }
  
      if (document.querySelector('.cart-drawer .you-may-also-like')) {
        this.upsell();
      }
  
      this.addCartDrawerListeners();
  
    }
  
    upsell () {
  
        const addProduct = async (productId) => {
          const url = '/cart/add.js';
          const requestData = {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              id: productId,
              quantity: 1
            })
          };
        
          try {
  
            const response = await fetch(url, requestData);
            const data = await response.json();
            this.updateCartDrawer();       
  
          } catch (error) {
            console.error('Error adding product to cart:', error);
          }
        }
  
        let products = document.querySelectorAll('.you-may-also-like .product .add span');
  
        products.forEach(element => {
          element.addEventListener("click", (e) => {
            addProduct(e.target.getAttribute('data-id'))
          });
        });
  
    }
  
    gamification(cart) {
  
        const validateGift = ( id, variantID, cart ) => {
  
            const items = cart.items;
            const productExists = items.some(item => item.product_id === id);
  
            if (!productExists) {
                addGift( variantID )
            }
  
        }
  
        const updateQuantity = async (key) => {
            try {
              const response = await fetch("/cart/update.js", {
                method: "post",
                headers: {
                  Accept: "application/json",
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({ updates: { [key]: 1 } }),
              });
          
              if (!response.ok) {
                throw new Error("Error updating cart");
              }
          
              const cart = await response.json();
              this.updateCartDrawer();
            } catch (error) {
              console.log("Error updating cart:", error);
            }
          };
          
  
        const addGift = async (productId) => {
            const url = '/cart/add.js';
            const requestData = {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                id: productId,
                quantity: 1
              })
            };
          
            try {
  
              const response = await fetch(url, requestData);
              const data = await response.json();
              console.log('Product added to cart:', data);
  
              if ( data.quantity > 1 ) {
  
                let key = data.key;
                updateQuantity(key)
  
              }else {
                // Update cart
                this.updateCartDrawer();
              }          
  
            } catch (error) {
              console.error('Error adding product to cart:', error);
            }
          }
  
        const progressBarFunction = () => {
  
            const itemCount = cart.item_count,
                  totalPrice = cart.total_price / 100,
                  progressBar = document.querySelector('.cart__progress-bar__background .cart__progress-bar__bar'),
                  arrayGoals = window.gift_goals.goals,
                  messageSelector = document.querySelector('.cart__progress-bar__title');
  
            const progressMessage = () => {
                for ( let key in arrayGoals ) {
                    if (arrayGoals.hasOwnProperty(key)) {
    
                      let goal = window.gift_goals.goals[key];
                      let value = '',
                          remainingPrice = '';
    
                      if (!localStorage.getItem('gamification_goal-new:' + key)) {
                        value = goal.value;
                        value = value.toFixed(2)
                        remainingPrice = value  - totalPrice;
  
                        if (goal.value == 200) {
                            messageSelector.innerHTML = `You're <strong>$${remainingPrice.toFixed(2)}</strong> away from another <strong>${goal.nameGoal}</strong>`
                        }else {
                            messageSelector.innerHTML = `You're <strong>$${remainingPrice.toFixed(2)}</strong> away from a <strong>${goal.nameGoal}</strong>`
                        }
                        
                        break
  
                      }
                    }
                  }
                if ( document.querySelectorAll('.cart__progress-bar__item.active').length == 3 ) {
                    messageSelector.innerHTML = `<strong>Congrats!</strong> You get Expedited Shipping + 2 Freebies!`
                }
            }
        
            let width = 0,
                messageProgress = ``;
        
              if (totalPrice < 75) {
                  width = 10;
              }
      
              if ( totalPrice > 75 && totalPrice < 115 ) {
                  width = 30;
              }
      
              if ( totalPrice > 115 && totalPrice < 125 ){
                  width = 40;
              }
      
              if ( totalPrice >= 125 && totalPrice < 150 ) {
                  width = 67;
              }
      
              if ( totalPrice >= 150 && totalPrice < 200 ) {
                  width = 77;
              }
      
              if ( totalPrice >= 200 ) {
                  width = 100;
              }
  
              if ( totalPrice == 0 ) {
                width = 0
              }
  
              progressMessage()
  
  
              for ( let key in arrayGoals ) {
                if (arrayGoals.hasOwnProperty(key)) {
  
                  let goal = window.gift_goals.goals[key];
  
                  if ( totalPrice >= goal.value ) {
  
                    document.querySelector(`#${goal.idGoal}-${goal.value}`).classList.add('active');
                    localStorage.setItem('gamification_goal-new:' + key, true);
                    goal.complete = true;
  
                    if (goal.product != '' ) {
                        validateGift( goal.id_product, goal.variant, cart )
                    }
                  }else {
                    if (document.querySelector(`#${goal.idGoal}-${goal.value}`).classList.contains('active')) {
                        document.querySelector(`#${goal.idGoal}-${goal.value}`).classList.remove('active');
                        goal.complete = false;
                        localStorage.removeItem('gamification_goal-new:' + key, true);
                    }
                  }
  
                  progressMessage()
  
                }
              }
        
            progressBar.style.width = `${width}%`;
  
        }
  
  
        progressBarFunction();
      
  
    }
  
    addCartDrawerListeners() {
      // Update quantities
      this.cartDrawer
        .querySelectorAll(".cart-drawer-quantity-selector button")
        .forEach((button) => {
          button.addEventListener("click", async () => {
            // Get line item key
            const rootItem =
              button.parentElement.parentElement.parentElement.parentElement
                .parentElement;
            const key = rootItem.getAttribute("data-line-item-key");
  
            // Get new quantity
            const currentQuantity = Number(
              button.parentElement.querySelector("input").value
            );
            const isUp = button.classList.contains(
              "cart-drawer-quantity-selector-plus"
            );
            const newQuantity = isUp ? currentQuantity + 1 : currentQuantity - 1;
  
            // Ajax update
            const res = await fetch("/cart/update.js", {
              method: "post",
              headers: {
                Accept: "application/json",
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ updates: { [key]: newQuantity } }),
            });
            const cart = await res.json();
  
            // Update cart
            this.updateCartDrawer();
  
  
          });
        });
  
      this.cartDrawerBox.addEventListener("click", (e) => {
        e.stopPropagation();
      });
  
      this.cartDrawer
        .querySelectorAll(".cart-drawer-header-right-close, .cart-drawer")
        .forEach((el) => {
          el.addEventListener("click", () => {
            console.log("closing drawer");
            this.closeCartDrawer();
          });
        });
  
        // if (this.cartFooter) {
        //     let footerHeight = document.querySelector(".cart-drawer-footer").offsetHeight;
  
        //     document.querySelector("#content-cart").style.paddingBottom = `${footerHeight}px`;
        //     console.log(`footer height: ${footerHeight}`);
        // }
  
      this.removeProduct();
    
    }
  
    addFormListeners() {
      document
        .querySelectorAll('form[action="/cart/add"]')
        .forEach((form) => {
          form.addEventListener("submit", async (e) => {
            e.preventDefault();
  
            form.querySelector('.add-to-cart').classList.add('btn--loading');
  
  
            // Submit form with ajax
            await fetch("/cart/add", {
              method: "post",
              body: new FormData(form),
            });
  
            // Get cart count
            const res = await fetch("/cart.js");
            const cart = await res.json();
  
            await this.updateCartDrawer();
  
            // Open cart drawer
  
            this.openCartDrawer();
            form.querySelector('.add-to-cart').classList.remove('btn--loading');
  
          });
        });
    }
  
    addCartLinkListeners() {
      document
        .querySelectorAll('.openCart')
        .forEach((a) => {
          a.addEventListener("click", (e) => {
            e.preventDefault();
            this.openCartDrawer();
          });
        });
    }
  
    async removeProduct() {
        let productKey = '';
      
        document
          .querySelectorAll('.cart-drawer-item .remove')
          .forEach((a) => {
            a.addEventListener("click", async (e) => {
      
              productKey = e.target.closest('.cart-drawer-item').getAttribute('data-line-item-key')
      
              try {
                const response = await fetch(`${window.Shopify.routes.root}cart/change.js`, {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                    id: `${productKey}`,
                    quantity: 0,
                  })
                });
      
                const data = await response.json();
                console.log('Producto actualizado en el carrito:', data);      
                this.updateCartDrawer();
              } catch (error) {
                console.error('Error al actualizar el producto en el carrito:', error);
              }
            });
          });
      }
      
  
    handleQuantityButtonClick(button) {
      // Get line item key
      const rootItem =
        button.parentElement.parentElement.parentElement.parentElement
          .parentElement;
      const key = rootItem.getAttribute("data-line-item-key");
  
      // Get new quantity
      const currentQuantity = Number(
        button.parentElement.querySelector("input").value
      );
      const isUp = button.classList.contains(
        "cart-drawer-quantity-selector-plus"
      );
      const newQuantity = isUp ? currentQuantity + 1 : currentQuantity - 1;
  
      // Ajax update
      fetch("/cart/update.js", {
        method: "post",
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ updates: { [key]: newQuantity } }),
      })
        .then((res) => res.json())
        .then((cart) => {
          // Update cart
          this.updateCartDrawer(cart);
        })
        .catch((error) => {
          console.log("Error updating cart:", error);
        });
    }
  
    handleCartDrawerClick(e) {
      e.stopPropagation();
    }
  
    handleCloseButtonClick() {
      console.log("closing drawer");
      this.closeCartDrawer();
    }
  
    handleFormSubmit(e) {
      e.preventDefault();
      const form = e.target;
  
      // Submit form with ajax
      fetch("/cart/add", {
        method: "post",
        body: new FormData(form),
      })
        .then(() => {
          // Get cart count
          return fetch("/cart.js");
        })
        .then((res) => res.json())
        .then((cart) => {
          this.updateCartItemCounts(cart.item_count);
  
          // Update cart
          return this.updateCartDrawer();
        })
        .then(() => {
          // Open cart drawer
          this.openCartDrawer();
        })
        .catch((error) => {
          console.log("Error adding item to cart:", error);
        });
    }
  
    handleCartLinkClick(e) {
      e.preventDefault();
      this.openCartDrawer();
    }
  }
  
  const CartDrawerSite = new CartDrawer();
  